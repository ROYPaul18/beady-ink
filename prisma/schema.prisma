generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  nom                 String               @default("Nom temporaire")
  prenom              String               @default("Pr√©nom temporaire")
  telephone           String               @unique @default("0000000000")
  password            String
  role                Role                 @default(USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  flashTattooRequests FlashTattooRequest[]
  reservations        Reservation[]
  reviews             Review[]
  tattooRequests      TattooRequest[]
}

model TattooRequest {
  id              Int      @id @default(autoincrement())
  availability    String
  size            String
  placement       String
  referenceImages String[]
  healthData      Json
  userId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  serviceId       Int
  service         Service  @relation(fields: [serviceId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model FlashTattooRequest {
  id            Int      @id @default(autoincrement())
  userId        Int
  flashTattooId Int
  healthData    Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  serviceId     Int
  service       Service  @relation(fields: [serviceId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Service {
  id                  Int                  @id @default(autoincrement())
  type                ServiceType          @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  flashTattooRequests FlashTattooRequest[]
  prestations         Prestation[]
  reservations        Reservation[]
  tattooRequests      TattooRequest[]
}

model Prestation {
  id           Int               @id @default(autoincrement())
  name         String
  duration     Int
  description  String
  price        Float
  serviceId    Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  category     OnglerieCategory?
  images       Image[]
  service      Service           @relation(fields: [serviceId], references: [id])
  reviews      Review[]
  reservations Reservation[]     @relation("ReservationPrestations")
}

model Image {
  id           Int        @id @default(autoincrement())
  url          String
  prestationId Int
  createdAt    DateTime   @default(now())
  prestation   Prestation @relation(fields: [prestationId], references: [id], onDelete: Cascade)
}

model Reservation {
  id          Int          @id @default(autoincrement())
  userId      Int
  serviceId   Int
  date        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  salon       String
  status      String       @default("PENDING")
  time        String
  healthData  String?
  tattooData  String?
  service     Service      @relation(fields: [serviceId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  reviews     Review[]
  prestations Prestation[] @relation("ReservationPrestations")
}

model Review {
  id            Int          @id @default(autoincrement())
  rating        Int
  comment       String
  userId        Int
  reservationId Int?
  prestationId  Int?
  createdAt     DateTime     @default(now())
  prestation    Prestation?  @relation(fields: [prestationId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model OpeningHours {
  id        Int        @id @default(autoincrement())
  salon     String
  startTime String?
  endTime   String?
  createdAt DateTime   @default(now())
  jour      String
  isClosed  Boolean    @default(false)
  updatedAt DateTime   @updatedAt
  date      DateTime
  weekKey   String?
  timeSlots TimeSlot[]
  @@unique([salon, date])
}

model TimeSlot {
  id             Int          @id @default(autoincrement())
  startTime      String
  endTime        String
  openingHoursId Int
  isAvailable    Boolean      @default(true)
  openingHours   OpeningHours @relation(fields: [openingHoursId], references: [id], onDelete: Cascade)

  @@index([openingHoursId])
}

enum OnglerieCategory {
  SEMI_PERMANENT
  POSE_GEL
  SOIN
}

enum Role {
  USER
  CLIENT
  ADMIN
}

enum ServiceType {
  ONGLERIE
  TATOUAGE
  FLASH_TATTOO
}
