// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  directUrl = env("DIRECT_URL")
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nom          String        @default("Nom temporaire")
  prenom       String        @default("Prénom temporaire")
  telephone    String        @unique @default("0000000000")
  password     String
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  reviews      Review[]      // Relation avec les avis
}

model Service {
  id           Int           @id @default(autoincrement())
  type         ServiceType   @unique
  prestations  Prestation[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Prestation {
  id           Int           @id @default(autoincrement())
  name         String
  duration     Int
  description  String
  price        Float
  serviceId    Int
  service      Service       @relation(fields: [serviceId], references: [id])
  reservations Reservation[] @relation("ReservationPrestations")
  images       Image[]       // Relation avec le modèle Image
  reviews      Review[]      // Relation avec les avis
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Image {
  id           Int           @id @default(autoincrement())
  url          String        // URL de l'image sur Cloudinary
  prestationId Int           // Clé étrangère vers la prestation
  prestation   Prestation    @relation(fields: [prestationId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
}

model Reservation {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  service      Service       @relation(fields: [serviceId], references: [id])
  serviceId    Int
  prestations  Prestation[]  @relation("ReservationPrestations")
  date         DateTime
  salon        String
  status       String        @default("PENDING")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reviews      Review[]      // Relation avec les avis
}

model Review {
  id           Int           @id @default(autoincrement())
  rating       Int           // Note de 1 à 5
  comment      String        // Texte de l'avis
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  reservationId Int?
  reservation  Reservation?  @relation(fields: [reservationId], references: [id])
  prestationId Int?
  prestation   Prestation?   @relation(fields: [prestationId], references: [id])
  createdAt    DateTime      @default(now())
}

enum Role {
  USER
  CLIENT
  ADMIN
}

enum ServiceType {
  ONGLERIE
  TATOUAGE
  FLASH_TATTOO
}


